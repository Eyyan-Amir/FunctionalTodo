{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyle","makeStyles","theme","containerClass","width","display","flexDirection","alignItems","justifyContent","line","lineBreak","color","throught","textDecoration","hide","unHide","icon","fontSize","margin","marginLeft","ll","maxHeight","overflow","CardContnt","position","inputarea","inputField","gridRoot","justify","cardBackground","boxShadow","root","marginTop","flexGrow","deleteHistory","padding","top","backgroundColor","completeHistory","mdlBtn","menuBtn","clearBtn","borderRadius","todoHeader","fontWeight","App","classes","useState","todos","setTodos","error","setError","count","setCount","delCount","setDelCount","compCount","setCompCount","todo","setTodo","screen","setScreen","history","setDelHistory","completeHist","setCompleteHist","open","setOpen","menu","setMenu","React","selectTodoIndex","setSelectTodoIndex","onOpenModal","onCloseModal","onShowHist","handleClose","handleAddTodo","title","id","index","findIndex","v","splice","addTodo","todoLocal","onActive","status","Math","floor","random","undefined","push","document","getElementById","focus","item","Index","filter","i","className","Grid","container","xs","sm","md","lg","Card","CardContent","Typography","scroll","List","map","t","console","log","isChecked","ListItem","Checkbox","checked","onChange","handleCheckBox","ListItemText","primary","Fragment","onClick","editTodo","arr","removeTodo","localTodo","completeTodo","TextField","label","value","variant","helperText","event","target","onKeyDown","e","keyCode","preventDefault","autoComplete","Button","href","del","ListItemIcon","onClose","center","comp","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","anchorEl","keepMounted","Boolean","MenuItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.51fc6dc1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport { Modal } from \"react-responsive-modal\";\nimport \"react-responsive-modal/styles.css\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nconst useStyle = makeStyles((theme) => ({\n\tcontainerClass: {\n\t\twidth: \"100\",\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"row\",\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t},\n\tline: {\n\t\tlineBreak: \"anywhere \",\n\t\tcolor: \"blue\",\n\t},\n\tthrought: {\n\t\ttextDecoration: \"line-through\",\n\t\tcolor: \"Green\",\n\t},\n\thide: {\n\t\tdisplay: \"none\",\n\t},\n\tunHide: {\n\t\tdisplay: \"block\",\n\t},\n\ticon: {\n\t\tfontSize: \"25px\",\n\t\tmargin: \"Auto 20px\",\n\t\tmarginLeft: \"20%\",\n\t},\n\tll: {\n\t\tmaxHeight: \"500px\",\n\t\toverflow: \"auto\",\n\t},\n\tCardContnt: {\n\t\tposition: \"relative\",\n\t},\n\tinputarea: {\n\t\twidth: 330,\n\t},\n\tinputField: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"row\",\n\t},\n\tgridRoot: {\n\t\tdisplay: \"flex\",\n\t\tjustify: \"center\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"column\",\n\t},\n\tcardBackground: {\n\t\t// border: \"1px solid black\",\n\t\t// boxShadow: \"4px 4px 7px 1px gray\",\n\t\t// backgroundColor: \"lightGray\",\n\t\tboxShadow: \"3px 4px 12px -2px grey\",\n\t},\n\troot: {\n\t\tmarginTop: \"1rem\",\n\t\tflexGrow: 1,\n\t},\n\tdeleteHistory: {\n\t\tposition: \"absolute\",\n\t\tpadding: \" 10px 7px\",\n\t\tmarginLeft: \"75%\",\n\t\ttop: \"10%\",\n\t\ttextDecoration: \"none\",\n\t\tcolor: \"white\",\n\t\tbackgroundColor: \"Blue\",\n\t},\n\tcompleteHistory: {\n\t\tposition: \"absolute\",\n\t\tpadding: \" 10px 7px\",\n\t\tmarginLeft: \"75%\",\n\t\ttop: \"10%\",\n\t\tmarginLeft: \"48%\",\n\t\ttextDecoration: \"none\",\n\t\tcolor: \"white\",\n\t\tbackgroundColor: \"Green\",\n\t},\n\tmdlBtn: {\n\t\tpadding: \"3px 17px\",\n\t\tmarginLeft: \"50px\",\n\t},\n\tmenuBtn: {\n\t\tposition: \"absolute\",\n\t\tpadding: \" 10px 7px\",\n\t\ttop: \"4%\",\n\t\tmarginLeft: \"38%\",\n\t\ttextDecoration: \"none\",\n\t\tcolor: \"blue\",\n\t},\n\tclearBtn: {\n\t\tposition: \"absolute\",\n\t\tpadding: \" 8px 10px\",\n\t\tborderRadius: \"7px\",\n\t\tmarginLeft: \"-200%\",\n\t\ttextDecoration: \"none\",\n\t\tcolor: \"white\",\n\t\tbackgroundColor: \"Red\",\n\t},\n\ttodoHeader: {\n\t\tcolor: \"purple\",\n\t\ttextDecoration: \"double underLine\",\n\t\tfontWeight: \"bolder\",\n\t\tfontSize: \"20px\",\n\t},\n}));\n\nfunction App() {\n\tconst classes = useStyle();\n\n\tconst [todos, setTodos] = useState([]);\n\tconst [error, setError] = useState();\n\tconst [count, setCount] = useState(0);\n\tconst [delCount, setDelCount] = useState(1);\n\tconst [compCount, setCompCount] = useState(-1);\n\tconst [todo, setTodo] = useState({});\n\tconst [screen, setScreen] = useState(0);\n\tconst [history, setDelHistory] = useState([]);\n\tconst [completeHist, setCompleteHist] = useState([]);\n\tconst [open, setOpen] = useState(false);\n\tconst [menu, setMenu] = useState(null);\n\tconst [checked, setChecked] = React.useState(false);\n\tconst [selectTodoIndex, setSelectTodoIndex] = useState();\n\n\tconst onOpenModal = () => {\n\t\tsetOpen(true);\n\t};\n\tconst onCloseModal = () => {\n\t\tsetOpen(false);\n\t};\n\tconst onShowHist = () => {\n\t\tsetScreen(0);\n\t};\n\tconst handleClose = () => {\n\t\tsetMenu(null);\n\t};\n\n\tconst handleClick = (event) => {\n\t\tsetMenu(event.currentTarget);\n\t};\n\n\tconst handleCheckBox = (todo) => {\n\t\tlet index = todos.findIndex((i) => i.id == todo.id);\n\t\tsetSelectTodoIndex(index);\n\t};\n\n\tconst completeTodo = (todo) => {\n\t\tlet index = todos.findIndex((v) => v.id === todo.id);\n\t\tlet localTodo = todos[index];\n\t\tlocalTodo = {\n\t\t\t...localTodo,\n\t\t\tstatus: 1,\n\t\t};\n\t\ttodos.splice(index, 1, localTodo);\n\t\tsetTodos([...todos]);\n\t\tsetCompCount(compCount + 1);\n\n\t\tlet arr = [...completeHist];\n\t\tarr.push(todo);\n\t\tsetCompleteHist(arr);\n\t};\n\n\tconst handleAddTodo = () => {\n\t\tif (todo.title == \"\") {\n\t\t\tsetError(true);\n\t\t} else if (todo.id) {\n\t\t\tlet index = todos.findIndex((v) => v.id === todo.id);\n\t\t\ttodos.splice(index, 1, todo);\n\t\t\tsetError(true);\n\t\t\tsetTodo(\"\");\n\t\t\tsetTodo([...todos]);\n\t\t} else {\n\t\t\taddTodo();\n\t\t}\n\t};\n\n\tconst addTodo = () => {\n\t\tlet todoLocal = {\n\t\t\tonActive: false,\n\t\t\tstatus: 0,\n\t\t\tid: Math.floor(Math.random() * 10000),\n\t\t\t...todo,\n\t\t};\n\t\tif (todoLocal.title !== undefined && todoLocal.title !== \"\") {\n\t\t\ttodos.push(todoLocal);\n\t\t\tsetTodos([...todos]);\n\t\t\tsetTodo({});\n\t\t\tsetError(false);\n\t\t\tsetCount(count + 1);\n\t\t} else {\n\t\t\tsetError(true);\n\t\t}\n\n\t\tdocument.getElementById(\"focus\").focus();\n\t};\n\n\tconst editTodo = ({ id, title }) => {\n\t\tsetTodo({\n\t\t\tid,\n\t\t\ttitle,\n\t\t});\n\t};\n\n\tconst removeTodo = (item) => {\n\t\tconst Index = [...todos].filter((i) => i.id !== item.id);\n\t\tlet arr = [...history];\n\t\tarr.push(item);\n\t\tsetDelHistory(arr);\n\n\t\tsetTodos(Index);\n\t\tsetCount(count - 1);\n\t\tsetDelCount(delCount + 1);\n\t};\n\n\tconst handleChange = (event) => {\n\t\tsetTodo({\n\t\t\t...todo,\n\t\t\ttitle: event.target.value,\n\t\t});\n\t};\n\tconst handleKey = (e) => {\n\t\tif (e.keyCode === 13) {\n\t\t\te.preventDefault();\n\t\t\thandleAddTodo();\n\t\t}\n\t};\n\tconst deleteHistory = (item) => {\n\t\tsetScreen(1);\n\n\t\tconst Index = [...history].filter((i) => i.id !== item.id);\n\t\tsetDelHistory(Index);\n\t\tsetDelCount(delCount - 1);\n\t\tonCloseModal();\n\t\thandleClose();\n\t};\n\tconst clear = () => {\n\t\t// let Index = [];\n\t\t// setTodos(Index);\n\t\tsetTodos([]);\n\t\tsetCount(0);\n\t};\n\n\tconst completeHistory = (item) => {\n\t\tsetScreen(2);\n\n\t\tconst Index = [...completeHist].findIndex((i) => i.id !== item.id);\n\t\tsetCompCount(compCount + 1);\n\t\thandleClose();\n\t};\n\n\tconst list = () => {\n\t\treturn (\n\t\t\t<List>\n\t\t\t\t{todos.map((t, i) => {\n\t\t\t\t\tconsole.log(selectTodoIndex, i);\n\t\t\t\t\tlet isChecked = selectTodoIndex == i;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListItem key={i}>\n\t\t\t\t\t\t\t<Checkbox checked={selectTodoIndex == i} onChange={() => handleCheckBox(t)} />\n\t\t\t\t\t\t\t<ListItemText className={`${classes.line} ${t.status == 1 ? classes.throught : \"\"} `} primary={t.title} />\n\t\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\t\tclassName={`${classes.line} ${isChecked ? classes.unHide : classes.hide} `}\n\t\t\t\t\t\t\t\tprimary={\n\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t<CreateIcon className={classes.icon} onClick={() => editTodo(t, i)} />\n\t\t\t\t\t\t\t\t\t\t<CloseIcon className={classes.icon} onClick={() => removeTodo(t)} />\n\t\t\t\t\t\t\t\t\t\t<DoneIcon className={classes.icon} onClick={() => completeTodo(t)} />\n\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</List>\n\t\t);\n\t};\n\n\tconst deleteList = () => {\n\t\treturn (\n\t\t\t<List>\n\t\t\t\t{history.map((del, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListItem key={i}>\n\t\t\t\t\t\t\t<ListItemText className={classes.line} primary={del.title} />\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<CloseIcon onClick={onOpenModal} />\n\t\t\t\t\t\t\t\t<Modal open={open} onClose={onCloseModal} center>\n\t\t\t\t\t\t\t\t\t<h2>Are you sure to Delete</h2>\n\t\t\t\t\t\t\t\t\t<button className={classes.mdlBtn} onClick={() => deleteHistory(del)}>\n\t\t\t\t\t\t\t\t\t\tYes\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button className={classes.mdlBtn} onClick={onCloseModal}>\n\t\t\t\t\t\t\t\t\t\tNo\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Modal>\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</List>\n\t\t);\n\t};\n\n\tconst completeList = () => {\n\t\treturn (\n\t\t\t<List>\n\t\t\t\t{completeHist.map((comp, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ListItem key={i}>\n\t\t\t\t\t\t\t<ListItemText className={classes.line} primary={comp.title} />\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<DoneIcon />\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</List>\n\t\t);\n\t};\n\tconst options = [\"Delete History\", \"Complete History\"];\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<Grid container className={classes.containerClass}>\n\t\t\t\t<Grid item xs={5} sm={5} md={5} lg={5}>\n\t\t\t\t\t<Card className={classes.cardBackground}>\n\t\t\t\t\t\t{screen == 0 && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<CardContent className={classes.CardContnt}>\n\t\t\t\t\t\t\t\t\t<Typography className={classes.todoHeader} color='textSecondary'>\n\t\t\t\t\t\t\t\t\t\t{` ${count === 0 ? `you have ${count} todo :- ( ` : `you have ${count} todo :- ) `}`}{\" \"}\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<div className={classes.scroll}>{list()}</div>\n\t\t\t\t\t\t\t\t\t<div className={classes.inputField}>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.inputarea}\n\t\t\t\t\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t\t\t\t\t\tid='focus'\n\t\t\t\t\t\t\t\t\t\t\tlabel='Add a Todo'\n\t\t\t\t\t\t\t\t\t\t\tvalue={todo.title || \"\"}\n\t\t\t\t\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\t\t\t\t\thelperText={error ? \"Incorrect entry.\" : \"\"}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t\tonKeyDown={handleKey}\n\t\t\t\t\t\t\t\t\t\t\tautoComplete='off'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<Button variant='contained' color='primary' onClick={handleAddTodo}>\n\t\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t\t\t<a className={classes.clearBtn} href='#' onClick={clear}>\n\t\t\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{screen == 1 && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<ArrowBackIcon onClick={onShowHist} />\n\t\t\t\t\t\t\t\t\t<Typography className={classes.todoHeader} color='textSecondary'>\n\t\t\t\t\t\t\t\t\t\t{` ${delCount === 0 ? ` ${delCount} Delete todo  ` : `you have ${delCount} Delete todos `}`}{\" \"}\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<div>{deleteList()}</div>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{screen == 2 && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t<CardContent>\n\t\t\t\t\t\t\t\t\t<ArrowBackIcon onClick={onShowHist} />\n\t\t\t\t\t\t\t\t\t<Typography className={classes.todoHeader} color='textSecondary'>\n\t\t\t\t\t\t\t\t\t\t{` ${compCount === 0 ? ` ${compCount} Complete todo  ` : `you have ${compCount} Complete todos `}`}{\" \"}\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<div>{completeList()}</div>\n\t\t\t\t\t\t\t\t</CardContent>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tclassName={classes.menuBtn}\n\t\t\t\t\t\t\taria-label='more'\n\t\t\t\t\t\t\taria-controls='long-menu'\n\t\t\t\t\t\t\taria-haspopup='true'\n\t\t\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MoreVertIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<Menu id='simple-menu' anchorEl={menu} keepMounted open={Boolean(menu)} onClose={handleClose}>\n\t\t\t\t\t\t\t<MenuItem onClick={deleteHistory}>Delete History</MenuItem>\n\t\t\t\t\t\t\t<MenuItem onClick={completeHistory}>Complete History</MenuItem>\n\t\t\t\t\t\t</Menu>\n\t\t\t\t\t</Card>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}